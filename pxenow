#!/usr/bin/env python3

import argparse
import netifaces
import os
import stat
import urllib.request
import zipfile
# import errno
from netifaces import AF_INET
from shutil import copy2 as cp, which
from subprocess import call


def getfile(printable_name: str, destination_file: str, url: str, filename_in_zip: str) -> None:
	if os.path.isfile("tftp/boot/img/{0}".format(destination_file)):
		print("{0} found".format(printable_name))
	else:
		if filename_in_zip == "":
			# Not a zip file
			print("Getting {0}...".format(printable_name))
			urllib.request.urlretrieve(url, filename="tftp/boot/img/{0}".format(destination_file))
		else:
			# Zip file: download and extract
			temp_name = "pxenow-downloaded-{0}.zip".format(printable_name)

			if not os.path.isfile(temp_name):
				print("Getting {0}...".format(printable_name))
				urllib.request.urlretrieve(url, filename=temp_name)

			with zipfile.ZipFile(temp_name, "r") as zip_ref:
				print("Extracting {0}...".format(filename_in_zip))
				zipinfo = zip_ref.getinfo(filename_in_zip)
				zipinfo.filename = destination_file  # avoids extracting random folders and renaming
				zip_ref.extract(filename_in_zip, path="tftp/boot/img/")
			os.remove(temp_name)

	return


parser = argparse.ArgumentParser(description='Create a PXE server right here, right now.')
# TODO: support using IP instead of interface (why did I even do this?)
parser.add_argument('-i', '--interface', type=str, help="Interface to bind, e.g. enp3s0")
parser.add_argument('-l', '--lubuntu', type=str, help="Lubuntu ISO image")
args = parser.parse_args()

DNSMASQCONF = "dnsmasq-pxe.conf"

interfaces = netifaces.interfaces()

# Quick setting a static IP:
# IFACE=enp3s0
# ip link set "${IFACE}" up
# ip addr flush dev "${IFACE}"
# ip addr add 10.80.7.1/24 dev "${IFACE}"
# flush is necessary only if this is done over and over again (e.g. in a script like it was before)

if args.interface is None:
	if 'lo' in interfaces:
		interfaces.remove('lo')
	num = len(interfaces)
	if num == 0:
		print("No interfaces found (other than loopback, possibly)")
		exit(1)
	elif num == 1:
		args.interface = interfaces[0]
	else:
		print("More than one interface: specify which one to use in " + str(interfaces))
		exit(1)
else:
	if args.interface not in interfaces:
		print(str(interfaces))
		print("Interface " + str(args.interface) + " doesn't exist")
		exit(1)

addresses = netifaces.ifaddresses(args.interface)[AF_INET]
if len(addresses) == 0:
	print("No addresses found for interface " + str(args.interface))
	exit(1)

server = addresses[0]['addr']
netmask = addresses[0]['netmask']

# There's also "memdisk" but it's not really needed
pxelinuxFiles = ["pxelinux.0", "lpxelinux.0", "ldlinux.c32", "menu.c32", "libutil.c32"]
pxelinuxFiles.extend(["hdt.c32", "libmenu.c32", "libcom32.c32", "libgpl.c32"])  # for HDT
pxelinuxFiles.extend(["reboot.c32", "poweroff.c32"])

for file in pxelinuxFiles:
	src = "/usr/lib/syslinux/bios/" + file
	dst = "tftp/boot/" + file
	if not os.path.isfile(dst):
		if os.path.isfile(src):
			print("Copying " + file + "...")
			cp(src, dst)
		else:
			print("Cannot find " + src)
			exit(1)

pci_ids_path = "tftp/boot/" + "pci.ids"
if not os.path.isfile(pci_ids_path):
	if os.path.isfile("/usr/share/hwdata/pci.ids"):
		print("Copying pci.ids...")
		cp("/usr/share/hwdata/pci.ids", pci_ids_path)
	else:
		print("Warning: cannot find pci.ids ")

print("Generating dnsmasq configuration...")
# useful stuff: https://wiki.archlinux.org/index.php/Dnsmasq#PXE_server
dnsmasqConfig = """port=0
interface={iface}
bind-interfaces
dhcp-leasefile=dnsmasq.leases

enable-tftp
tftp-root={pwd}/tftp
dhcp-option-force=66,{ip} # TFTP server

log-dhcp # More info on what's going on
dhcp-no-override # Don't put useless fields in DHCP offer
dhcp-range={ip},proxy,{netmask}

pxe-service=X86PC, "PXE boot NOW", boot/lpxelinux # It adds the .0 by itself
dhcp-option=vendor:PXEClient,6,2b # "kill multicast"

# These don't work in Proxy DHCP mode, apparently:
# dhcp-boot=boot/lpxelinux.0
# dhcp-option-force=209,"pxelinux.cfg/default" # PXELINUX config file (it's the default anyway)
# dhcp-option-force=210,/boot/ # PathPrefix, doesn't seem to be needed (See RFC 5071)
""".format(iface=args.interface, ip=server, netmask=netmask, pwd=os.getcwd())

with open(DNSMASQCONF, "w") as configFile:
	configFile.write(dnsmasqConfig)
os.chmod(DNSMASQCONF, os.stat(DNSMASQCONF).st_mode | stat.S_IROTH)

if which("dnsmasq") is None:
	print("dnsmasq binary not found in PATH")
	exit(2)

result = call(["dnsmasq", "-d", "--test", "-C", DNSMASQCONF])
if result != 0:
	print("dnsmasq returned " + str(result))
	exit(result)

os.makedirs("tftp/boot/iso", exist_ok=True)

getfile("Memtest86+", "memtest", "http://www.memtest.org/download/5.01/memtest86+-5.01.zip", "memtest86+-5.01.bin")
getfile("PLoP", "plpbt.bin", "https://download.plop.at/files/bootmngr/plpbt-5.0.15.zip", "plpbt-5.0.15/plpbt.bin")
getfile("netboot.xyz", "netbootxyz", "https://boot.netboot.xyz/ipxe/netboot.xyz.lkrn", "")

if args.lubuntu is not None:
	os.makedirs("tftp/boot/iso/lubuntu", exist_ok=True)
	if not os.path.isfile(args.lubuntu):
		print("{0} doesn't exist".format(args.lubuntu))
		exit(4)
	if os.path.exists("tftp/boot/iso/lubuntu.iso"):
		if os.path.islink("tftp/boot/iso/lubuntu.iso"):
			os.remove("tftp/boot/iso/lubuntu.iso")
		else:
			print("{0} exists and is not a link".format(args.lubuntu))
			exit(3)
	print("Linking Lubuntu ISO...")
	os.symlink(args.lubuntu, "tftp/boot/iso/lubuntu.iso")
	print("Mounting Lubuntu ISO...")
	call(["mount", "-o", "loop", "-t", "iso9660", "tftp/boot/iso/lubuntu.iso", "tftp/boot/iso/lubuntu"])

try:
	call(["dnsmasq", "-d", "-C", DNSMASQCONF])
except KeyboardInterrupt:
	print("Keyboard interrupt (ctrl+C) detected")

call(["umount", "tftp/boot/iso/lubuntu"])
